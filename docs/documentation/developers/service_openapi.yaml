openapi: 3.0.3
info:
  description: API definition for the CDA
  version: 3.2.0
  title: CDA API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

# testing only
#servers:
#  - url: https://cancerdata.dsde-dev.broadinstitute.org
#  - url: https://cda.cda-dev.broadinstitute.org
#  - url: http://localhost:8080
#  - url: http://35.192.60.10:8080

tags:
  - name: query
    description: Retrieve the data stored in the CDA.
  - name: meta
    description: Retrieve meta information about CDA data or CDA itself

paths:
  /status:
    get:
      summary: CDA status
      description: Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - meta
      responses:
        200:
          $ref: "#/components/responses/StatusResponse"
        500:
          $ref: "#/components/responses/StatusResponse"

  /api/v1/columns:
    get:
      summary: Returns all column names and definitions for schema
      description: Return columnNames for schema along with their descriptions
      operationId: columns
      tags:
        - query

      responses:
        200:
          $ref: "#/components/responses/ColumnsResponse"

  /api/v1/dataset-description/latest:
    get:
      summary: Description of latest dataset
      description: Return data model and release notes for latest release.
      operationId: latestReleaseNotes
      tags:
        - meta
      responses:
        200:
          description: Latest dataset description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetDescription"

  /api/v1/dataset-description/all:
    get:
      summary: List descriptions of all available datasets
      description: Return data model and release notes of all releases.
      operationId: allReleaseNotes
      tags:
        - meta
      responses:
        200:
          description: List of dataset descriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DatasetDescription"

  /api/v1/subjects:
    post:
      summary: Execute Subject query
      description: |
        Execute a Subject query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: subjectQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The subject query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/subjects/files:
    post:
      summary: Execute Subject Files query
      description: |
        Execute a Subject Files query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: subjectFilesQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The subject query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/subjects/counts:
    post:
      summary: Execute Subjects Counts query
      description: |
        Execute a Subjects Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: subjectCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The subjects query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/subjects/files/counts:
    post:
      summary: Execute Subjects File Counts query
      description: |
        Execute a Subjects File Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: subjectFileCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The subjects query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/researchsubjects:
    post:
      summary: Execute Research Subject query
      description: |
        Execute a query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: researchSubjectQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The Research Subject query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/researchsubjects/files:
    post:
      summary: Execute ResearchSubject Files query
      description: |
        Execute a ResearchSubject Files query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: researchSubjectFilesQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The research subject query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/researchsubjects/counts:
    post:
      summary: Execute ResearchSubjects Counts query
      description: |
        Execute a ResearchSubjects Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: researchSubjectCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The research subjects query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/researchsubjects/files/counts:
    post:
      summary: Execute ResearchSubjects File Counts query
      description: |
        Execute a ResearchSubjects File Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: researchSubjectFileCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The research subjects query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/specimens:
    post:
      summary: Execute Specimens query
      description: |
        Execute a query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: specimenQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The specimen query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/specimen/files:
    post:
      summary: Execute Specimen Files query
      description: |
        Execute a Specimen Files query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: specimenFilesQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The specimen query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/specimen/counts:
    post:
      summary: Execute Specimen Counts query
      description: |
        Execute a Specimen Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: specimenCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The specimen query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/specimen/files/counts:
    post:
      summary: Execute Specimen File Counts query
      description: |
        Execute a Specimen File Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: specimenFileCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The specimen query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/diagnosis:
    post:
      summary: Execute Diagnosis query
      description: |
        Execute a query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: diagnosisQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The diagnosis query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/diagnosis/counts:
    post:
      summary: Execute Diagnosis Counts query
      description: |
        Execute a Diagnosis Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: diagnosisCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The diagnosis query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/mutations:
    post:
      summary: Execute Mutation query
      description: |
        Execute a query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: mutationQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The mutation query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/mutations/counts:
    post:
      summary: Execute Mutation Counts query
      description: |
        Execute a Mutation Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: mutationCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The mutation query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/treatments:
    post:
      summary: Execute Treatments query
      description: |
        Execute a query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: treatmentsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The treatments query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/treatments/counts:
    post:
      summary: Execute Treatments Counts query
      description: |
        Execute a Treatments Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: treatmentCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The treatment query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/unique-values:
    post:
      summary: Returns all unique values
      description: Return unique values given a qualified columnName
      operationId: uniqueValues
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/SystemValue"
        - $ref: "#/components/parameters/Count"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: column_name being requested
        required: true
        content:
          text/plain:
            schema:
              type: string

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/global-counts:
    post:
      summary: Returns counts of the DCS
      description: Return GlobalCounts for schema
      operationId: GlobalCounts
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: counts
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

  /api/v1/files:
    post:
      summary: Returns a list of files given a boolean query
      description: Return list of files for given query
      operationId: files
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/IncludeResultsCount"
        - $ref: "#/components/parameters/ResultOffset"
        - $ref: "#/components/parameters/ResultLimit"

      requestBody:
        description: The boolean query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/PagedResponse"

  /api/v1/files/counts:
    post:
      summary: Execute File Counts query
      description: |
        Execute a File Counts query composed of conditions on columns combined with boolean operators. The
        generated SQL query is returned in the response.
      operationId: fileCountsQuery
      tags:
        - query

      parameters:
        - $ref: "#/components/parameters/DryRun"

      requestBody:
        description: The files query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"

      responses:
        200:
          $ref: "#/components/responses/QueryResponse"

components:
  parameters:
    SystemValue:
      in: query
      name: system
      schema:
        type: string
      description: Filter on system for results
    Count:
      in: query
      name: count
      schema:
        type: boolean
      description: Show the number of occurances for each value
    IncludeResultsCount:
      in: query
      name: includeCount
      schema:
        type: boolean
        default: false
      description: Show the number of results available for the query
    ResultOffset:
      in: query
      name: offset
      schema:
        type: integer
        default: 0
      description: The number of entries to skip
    ResultLimit:
      in: query
      name: limit
      schema:
        type: integer
        default: 100
      description: The numbers of entries to return per page of data
    Table:
      in: query
      name: table
      schema:
        type: string
      description: tablename
    DryRun:
      in: query
      name: dryRun
      schema:
        type: boolean
        default: false
      description: If true, don't run the query, only generate and return it


  schemas:
    ErrorReport:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    SystemStatus:
      type: object
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string


    PagedResponseData:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
        query_sql:
          type: string
          description: the generated postgres SQL
        total_row_count:
          type: integer
          format: int64
          nullable: true
          description: the total number of rows in the query. can be null if the query is not complete
        next_url:
          type: string
          nullable: true
          description: a URL to use to fetch the next page of data in the query. can be null if the query is not complete

    QueryResponseData:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
        query_sql:
          type: string
          description: the generated postgres SQL

    ColumnsResponseData:
      type: object
      properties:
        result:
          type: array
          items:
            type: object

    DatasetDescription:
      type: object
      properties:
        release-date:
          $ref: "#/components/schemas/DateType"
        cda-version:
          type: string
        cda-model:
          $ref: "#/components/schemas/Model"
        notes:
          type: string
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/DatasetInfo"

    DateType:
      type: string

    DatasetInfo:
      type: object
      properties:
        source:
          type: string
        version:
          type: string
        date:
          $ref: "#/components/schemas/DateType"

    Model:
      type: object
      properties:
        version:
          type: string
        date:
          $ref: "#/components/schemas/DateType"
        model:
          type: object
          properties: {}

    Query:
      type: object
      description: |
        A Query consists of a node type, a value and l and r Query objects. A Query must
        have a node type, but other fields are optional depending on the node type. See
        the description of `node_type`for more information.

        For example, the query "age < 50" is expressed as:

        ```
        {
          "node_type": "<",
          "l": {
            "node_type": "column",
            "value": "age"
          },
          "r": {
            "node_type": "unquoted",
            "value": 50
          }
        }
        ```

      properties:
        node_type:
          type: string
          enum:
            [
              column,
              quoted,
              unquoted,
              ">=",
              "<=",
              "<",
              ">",
              "=",
              "!=",
              AND,
              OR,
              NOT,
              SUBQUERY,
              WHERE,
              IN,
              SELECTVALUES,
              SELECT,
              LIKE,
              IS,
              "IS NOT",
              "NOT IN",
              "NOT LIKE",
              ORDERBY,
              ORDERBYVALUES,
              "+",
              "-",
              "/",
              "*"
            ]
          description: >
            Query contents and behavior depends on `node_type`:
             * `column` - column name is in `value`
             * `quoted` - value that needs quotes is in `value`
             * `unquoted` - value that doesn't need quotes is in `value`
             * `>=`, `<=`, `<`, `>`, `=`, `!=`, `AND`, `OR` - `l` and `r` are used to create the expression `l` op `r`
             * `SUBQUERY` - `l` is run as a query on the results of query `r`
             * `NOT` - `l` is used to create the expression `NOT l`
        value:
          type: string
        l:
          $ref: "#/components/schemas/Query"
        r:
          $ref: "#/components/schemas/Query"

  responses:
    StatusResponse:
      description: common status response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SystemStatus"

    PagedResponse:
      description: query data response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PagedResponseData"

    QueryResponse:
      description: counts data response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueryResponseData"

    ColumnsResponse:
      description: columns response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ColumnsResponseData"

